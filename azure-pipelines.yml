trigger:
  branches:
    include:
    - feature/tn-adding-dev-version
  paths:
    include:
    - module-sources.json

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: GO111MODULE
  value: on
- name: CGO_ENABLED
  value: '0'
- name: GOROOT
  value: '/opt/hostedtoolcache/go/1.14.6/x64'
- name: GOPRIVATE
  value: 'dev.azure.com/sede-ds-adp'
- name: REGISTRY
  value: shellai.azurecr.io/sedp/kubeform
- group: gogit
- group: shellai_acr
- name: REPO_BASE_URL
  value: sede-ds-adp.visualstudio.com/Platform%20-%20General/_git

- name: IsMainBranch
  value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}

# Flux destination
- name: UpdateFluxOnFeatureBranch
  value: false
- name: FLUX_REPO
  value: thomas-flux-get-started
- name: FLUX_PATH_SBX
  value: releases/stratos-crds
- name: FLUX_PATH_PRD
  value: releases/stratos-crds


resources:
  repositories:
  - repository: kfc
    type: git
    name: Platform - General/kfc

stages:
- stage: Sandbox
  variables:
    - group: STRATOS_HELM_DEV
    - name: STAGE
      value: dev
    - name: GoVersion
      value: 1.14.6
  jobs:
  - job: Build
    steps:
    - checkout: self
      displayName: Checkout kubeform
      persistCredentials: true
    - checkout: kfc
      displayName: Checkout kfc
      persistCredentials: true
    - script: git checkout $(Build.SourceBranch)
      workingDirectory: kfc
      displayName: Checkout kfc branch

    - task: Cache@2
      inputs:
        key: 'docker-v2'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: DOCKER_CACHE_RESTORED
      displayName: Caching docker images
    - script: |
        docker load < $(Pipeline.Workspace)/docker/golang-dev-$(GoVersion).tar.gz
        docker load < $(Pipeline.Workspace)/docker/gengo-release-1.14.tar.gz
      condition: eq(variables.DOCKER_CACHE_RESTORED, 'true')
      displayName: Load docker images

    - script: docker login shellai.azurecr.io -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      displayName: Login to ShellAI ACR
    - task: GoTool@0
      inputs:
        version: $(GoVersion)
    - script: |
        git config --global user.email "sedp-ci@shell.com"
        git config --global user.name "Azure Pipeline"
        git config --global url."https://test:${GIT_READ_TOKEN}@dev.azure.com/sede-ds-adp/Platform%20-%20General/_git/kubeform".insteadOf https://dev.azure.com/sede-ds-adp/kubeform
      displayName: Set git properties

    - script: make build
      displayName: Build kubeform binaries
      workingDirectory: kubeform
    - script: make gen
      displayName: Run kubeform codegen
      workingDirectory: kubeform
    - script: |
        git add -A
        git commit -m "[skip ci] Update Terraform modules"
        git push origin HEAD:${BUILD_SOURCEBRANCH/#refs\/heads\/}
      displayName: Commit & push results to kubeform
      workingDirectory: kubeform
    - script: git rev-parse HEAD > ../kubeform-sha
      displayName: Store kubeform revision for kfc to use
      workingDirectory: kubeform
    - script: go mod edit -replace "kubeform.dev/kubeform=dev.azure.com/sede-ds-adp/kubeform.git@$(cat ../kubeform-sha)"
      displayName: Point kfc to the right revision of kubeform
      workingDirectory: kfc
    - script: go mod tidy && go mod vendor
      displayName: Update vendored version of kubeform in kfc
      workingDirectory: kfc
    - script: |
        git diff
        git add -A
        git commit -m "[skip ci] Update Terraform modules"
        git push -f origin HEAD:${BUILD_SOURCEBRANCH}
      displayName: Commit & push changes to kfc
      workingDirectory: kfc

    - script: make build
      displayName: Build kfc binaries
      workingDirectory: kfc
    - script: make container
      displayName: Build kfc containers
      workingDirectory: kfc
    - script: make push
      displayName: Push kfc containers
      workingDirectory: kfc
    - script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save appscode/golang-dev:$(GoVersion) | gzip > $(Pipeline.Workspace)/docker/golang-dev-$(GoVersion).tar.gz
        docker save ibelikov/gengo:release-1.14 | gzip > $(Pipeline.Workspace)/docker/gengo-release-1.14.tar.gz
      condition: ne(variables.DOCKER_CACHE_RESTORED, 'true')
      displayName: Cache docker image

    - script: |
        git clone https://$(DP-PUB-SBX-azdevops-pat)@$(REPO_BASE_URL)/$(FLUX_REPO)
        if [ $? -ne 0 ]; then
          exit 1
        fi

        cp kubeform/api/crds/modules*.yaml \
           $(FLUX_REPO)/$(FLUX_PATH_SBX)
        if [ $? -ne 0 ]; then
          echo "No CRDs copied. See the error above."
          exit 1
        fi

        cd $(FLUX_REPO)
        git add .
        git commit -m "[kubeform] Update CRDs"
        git push origin
      condition: or(eq(variables.IsMainBranch, true), eq(variables.UpdateFluxOnFeatureBranch, True))
      displayName: Push CRDs to flux repo

    - task: CopyFiles@2
      inputs:
        contents: |
          .image
          .tag
        sourceFolder: kfc/bin
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: Copy build state files

    - task: CopyFiles@2
      inputs:
        contents: |
          api/crds/modules*.yaml
        sourceFolder: kubeform
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: Copy CRDs

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: kfc-state
      displayName: Publish kfc-state

- stage: Production
  dependsOn:
  - Sandbox
  condition: and(succeeded(), eq(variables.IsMainBranch, true))
  variables:
  - group: STRATOS_HELM_PRD
  - name: STAGE
    value: prd
  jobs:
  - deployment: ReleaseTag
    # environment: prd
    environment: mgmtnpd
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: kfc-state

          - task: CopyFiles@2
            inputs:
              contents: |
                .image
                .tag
              sourceFolder: $(Pipeline.Workspace)/kfc-state
              targetFolder: $(Pipeline.Workspace)/s
            displayName: Restore build state

          - script: docker login shellai.azurecr.io -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            displayName: Login to ShellAI ACR

          - script: |
              IMAGE=$(cat .image)
              TAG=$(cat .tag)
              TAG_PRD=$(sed -En 's/(.*)-dev_(.*)/\1-prd_\2/p' .tag)
              docker pull $IMAGE:$TAG
              echo "Tagging $IMAGE:$TAG to $IMAGE:$TAG_PRD..."
              docker tag $IMAGE:$TAG $IMAGE:$TAG_PRD
              docker push $IMAGE:$TAG_PRD
            displayName: Tag container for release

          - script: |
              git config --global user.email "sedp-ci@shell.com"
              git config --global user.name "Azure Pipeline"

              git clone https://$(DP-PUB-SBX-azdevops-pat)@$(REPO_BASE_URL)/$(FLUX_REPO)
              if [ $? -ne 0 ]; then
                exit 1
              fi

              cp $(Pipeline.Workspace)/kfc-state/api/crds/modules*.yaml \
                 $(FLUX_REPO)/$(FLUX_PATH_PRD)
              if [ $? -ne 0 ]; then
                echo "No CRDs copied. See the error above."
                exit 1
              fi

              cd $(FLUX_REPO)
              git add .
              git commit -m "[kubeform] Update CRDs"
              git push origin
            displayName: Push CRDs to flux repo

          - script: |
              TAG=release-1.0

              # Find the TAG that does not exist yet by incrementing minor version number
              while [ -n "$(git tag -l '$TAG')" ]; do
                TAG=$(echo $TAG | awk -F '.' '{ printf("%s.%d.%s\n", $1, $2+1) }')
              done

              git tag $TAG
              git push origin $TAG
            displayName: Tag master branch

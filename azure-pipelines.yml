parameters:
- name: UseSandbox
  displayName: Deploy to sandbox? Choose if you experiment and break functionality.
  type: boolean
  default: false

trigger:
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  IS_MASTER_BRANCH: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  IS_PR_TO_MASTER: $[and(
        eq(variables['Build.Reason'], 'PullRequest'),
        endsWith(variables['Build.SourceBranch'], '/merge'),
        endsWith(variables['System.PullRequest.TargetBranch'], '/master'))]
  IS_FEATURE_BRANCH: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')]
  StratosManifestBranch: feature/tn-installing-aks-test # XXX: Use master


resources:
  repositories:
  - repository: kfc
    type: git
    name: Platform - General/kfc
  - repository: stratos
    ref: refs/heads/feature/tn-installing-aks-test
    type: github
    endpoint: 'Sede-x Github (ThomasNal)'
    # endpoint: 'Sede-x Github' # XXX: Fix the service connection permissions
    name: sede-x/stratos-core-bootstrap

stages:
- stage: Build
  variables:
  - name: GO111MODULE
    value: on
  - name: CGO_ENABLED
    value: '0'
  - name: GOROOT
    value: '/opt/hostedtoolcache/go/1.14.6/x64'
  - name: GOPRIVATE
    value: 'dev.azure.com/sede-ds-adp'
  - name: REGISTRY
    value: stratosprd.azurecr.io/kubeform
  - group: gogit
  jobs:
  - job: Build
    steps:
    - checkout: self
      displayName: Checkout kubeform
      persistCredentials: true
    - checkout: kfc
      displayName: Checkout kfc
      persistCredentials: true

    - script: git checkout ${BUILD_SOURCEBRANCH/#refs\/heads\/}
      displayName: Checkout kubeform source branch
      workingDirectory: kubeform
    - script: git checkout ${BUILD_SOURCEBRANCH/#refs\/heads\/}
      displayName: Checkout kfc source branch
      workingDirectory: kfc

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: F4DP-mgmtprd
        keyVaultName: f4dp-dp-mgmtprd-kv-001
        secretsFilter: stratosprd-acr-kubeform-pipeline-password
        runAsPreJob: false
    - script: echo $DOCKER_PASSWORD | docker login stratosprd.azurecr.io -u $DOCKER_LOGIN --password-stdin
      displayName: Login to ACR
      env:
        DOCKER_LOGIN: kubeform-pipeline
        DOCKER_PASSWORD: $(stratosprd-acr-kubeform-pipeline-password)

    - task: GoTool@0
      inputs:
        version: '1.14.6'
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: "1.18.3"
    - task: NodeTool@0
    - script: |
        git config --global user.email "sedp-ci@shell.com"
        git config --global user.name "Azure Pipelines"
        git config --global url."https://test:${GIT_READ_TOKEN}@dev.azure.com/sede-ds-adp/Platform%20-%20General/_git/kubeform".insteadOf https://dev.azure.com/sede-ds-adp/kubeform
      displayName: Set git properties

    # Build kubeform
    - script: make gen
      displayName: Run kubeform codegen
      env:
        CRD_PATH: crds
      workingDirectory: kubeform
    - script: go mod tidy && go mod vendor
      displayName: Update vendored packages in kubeform
      workingDirectory: kubeform
    - script: make build
      displayName: Build kubeform binaries
      workingDirectory: kubeform
    - script: make gen
      displayName: Run kubeform codegen
      env:
        CRD_PATH: crds
      workingDirectory: kubeform
    - script: |
        git status
        git add -A
        git commit -m "[skip ci] [kubeform] Update Terraform modules"
        git push
      displayName: Commit & push results to kubeform
      workingDirectory: kubeform

    # Build kfc binary
    - script: git rev-parse HEAD > ../kubeform-sha
      displayName: Store kubeform revision for kfc to use
      workingDirectory: kubeform
    - script: go mod edit -replace "kubeform.dev/kubeform=dev.azure.com/sede-ds-adp/kubeform.git@$(cat ../kubeform-sha)"
      displayName: Point kfc to the right revision of kubeform
      workingDirectory: kfc
    - script: go mod tidy && go mod vendor
      displayName: Update vendored version of kubeform in kfc
      workingDirectory: kfc
    - script: |
        git add -A
        git commit -m "[skip ci] [kubeform] Update Terraform modules"
        git push
      displayName: Commit & push changes to kfc
      workingDirectory: kfc
    - script: make build
      displayName: Build kfc binaries
      workingDirectory: kfc

    # Build kfc container
    - script: make container
      displayName: Build kfc containers
      workingDirectory: kfc
    - script: make push
      displayName: Push kfc containers
      workingDirectory: kfc
    - script: echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(cat bin/.container-tag)"
      displayName: Set DOCKER_TAG
      name: setDockerTag
      workingDirectory: kfc
    - script: echo $(setDockerTag.DOCKER_TAG)
      displayName: Echo DOCKER_TAG

- stage: DeploySandbox
  condition: 'and(${{ parameters.UseSandbox }}, succeeded())'
  dependsOn:
  - Build
  jobs:
  - template: deploy-template.yml
    parameters:
      componentsPath: components/sandbox/DPPUBMGMTNPDaks
      crdsPath: $(ComponentsPath)/stratos-crds
      dockerTag: $[ stageDependencies.Build.Build.outputs['setDockerTag.DOCKER_TAG'] ]
      environment: sbx

# - stage: DeployDevelopment
#   condition: "and(eq(variables.IS_FEATURE_BRANCH, true), ${{ not(parameters.UseSandbox) }}, succeeded())"
#   dependsOn:
#   - Build
#   jobs:
#   - template: deploy-template.yml
#     parameters:
#       componentsPath: components/dev/f4dpdev
#       crdsPath: $(ComponentsPath)/stratos-crds
#       dockerTag: $[ stageDependencies.Build.Build.outputs['setDockerTag.DOCKER_TAG'] ]
#       environment: dev

- stage: DeployQat
  condition: "and(eq(variables.IS_PR_TO_MASTER, true), ${{ not(parameters.UseSandbox) }}, succeeded())"
  dependsOn:
  - Build
  jobs:
  - template: deploy-template.yml
    parameters:
      componentsPath: components/staging/AKS-Test
      crdsPath: $(ComponentsPath)/stratos-crds
      dockerTag: $[ stageDependencies.Build.Build.outputs['setDockerTag.DOCKER_TAG'] ]
      environment: qat

- stage: DeployProduction
  condition: "and(eq(variables.IS_MASTER_BRANCH, true), ${{ not(parameters.UseSandbox) }}, succeeded())"
  dependsOn:
  - Build
  variables:
    BaseComponentsPath: components/base
  jobs:
  - template: deploy-template.yml
    parameters:
      componentsPath: components/npd/f4dpnpd
      crdsPath: $(BaseComponentsPath)/stratos-crds
      dockerTag: $[ stageDependencies.Build.Build.outputs['setDockerTag.DOCKER_TAG'] ]
      environment: mgmtnpd
      jobName: DeployNpd
  - template: deploy-template.yml
    parameters:
      componentsPath: components/prd/f4dpprd
      crdsPath: $(BaseComponentsPath)/stratos-crds
      dependsOn: DeployNpd # Prevent conflict during intersecting git clone and git push
      dockerTag: $[ stageDependencies.Build.Build.outputs['setDockerTag.DOCKER_TAG'] ]
      environment: mgmtprd
      jobName: DeployPrd

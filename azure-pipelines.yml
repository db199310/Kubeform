trigger:
  branches:
    include:
    - feature/tn-adding-dev-version
  paths:
    include:
    - module-sources.json

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: GO111MODULE
  value: on
- name: CGO_ENABLED
  value: '0'
- name: GOROOT
  value: '/opt/hostedtoolcache/go/1.14.6/x64'
- name: GOPRIVATE
  value: 'dev.azure.com/sede-ds-adp'
- name: REGISTRY
  value: shellai.azurecr.io/sedp/kubeform
- group: gogit
- group: shellai_acr


resources:
  repositories:
  - repository: kfc
    ref: refs/heads/feature/tn-adding-dev-version
    type: git
    name: Platform - General/kfc

stages:
- stage: Sandbox
  variables:
    ENVIRONMENT: dev
    GoVersion: 1.14.6
  jobs:
  - job: Build
    steps:
    - checkout: self
      displayName: Checkout kubeform
      persistCredentials: true
    - checkout: kfc
      displayName: Checkout kfc
      persistCredentials: true

    - task: Cache@2
      inputs:
        key: 'docker | "$(Agent.OS)" | golang-dev-*.tar'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: DOCKER_CACHE_RESTORED
      displayName: Caching docker images
    - script: docker load < $(Pipeline.Workspace)/docker/golang-dev-$(GoVersion).tar
      condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))

    - script: docker login shellai.azurecr.io -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      displayName: Login to ShellAI ACR
    - task: GoTool@0
      inputs:
        version: $(GoVersion)
    - script: |
        git config --global user.email "sedp-ci@shell.com"
        git config --global user.name "Azure Pipeline"
        git config --global url."https://test:${GIT_READ_TOKEN}@dev.azure.com/sede-ds-adp/Platform%20-%20General/_git/kubeform".insteadOf https://dev.azure.com/sede-ds-adp/kubeform
      displayName: Set git properties

    # - script: make build
    #   displayName: Build kubeform binaries
    #   workingDirectory: kubeform
    # - script: make gen
    #   displayName: Run kubeform codegen
    #   workingDirectory: kubeform
    # - script: |
    #     git add -A
    #     git commit -m "[skip ci] Update Terraform modules"
    #     git push origin HEAD:${BUILD_SOURCEBRANCH/#refs\/heads\/}
    #   displayName: Commit & push results to kubeform
    #   workingDirectory: kubeform
    # - script: git rev-parse HEAD > ../kubeform-sha
    #   displayName: Store kubeform revision for kfc to use
    #   workingDirectory: kubeform
    # - script: go mod edit -replace "kubeform.dev/kubeform=dev.azure.com/sede-ds-adp/kubeform.git@$(cat ../kubeform-sha)"
    #   displayName: Point kfc to the right revision of kubeform
    #   workingDirectory: kfc
    # - script: go mod tidy && go mod vendor
    #   displayName: Update vendored version of kubeform in kfc
    #   workingDirectory: kfc
    # - script: |
    #     git diff
    #     git add -A
    #     git commit -m "[skip ci] Update Terraform modules"
    #     git push -f origin HEAD:${BUILD_SOURCEBRANCH}
    #   displayName: Commit & push changes to kfc
    #   workingDirectory: kfc

    - script: make build
      displayName: Build kfc binaries
      workingDirectory: kfc
    - script: make container
      displayName: Build kfc containers
      workingDirectory: kfc
    - script: make push
      displayName: Push kfc containers
      workingDirectory: kfc
    - script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save appscode/golang-dev:$(GoVersion) > $(Pipeline.Workspace)/docker/golang-dev-$(GoVersion).tar
      condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_RESTORED, 'true')))
      displayName: Cache docker image

    - task: CopyFiles@2
      inputs:
        contents: |
          .image
          .tag
        sourceFolder: kfc/bin
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: Copy build state files

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: kfc-state
      displayName: Publish kfc-state

- stage: Production
  jobs:
  - deployment: ReleaseTag
    environment: npd # temporary to test approvals
    # environment: prd
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: kfc-state

          - task: CopyFiles@2
            inputs:
              contents: |
                .image
                .tag
              sourceFolder: $(Pipeline.Workspace)/kfc-state
              targetFolder: $(Pipeline.Workspace)/s
            displayName: Restore build state

          - script: docker login shellai.azurecr.io -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            displayName: Login to ShellAI ACR

          - script: |
              IMAGE=$(cat .image)
              TAG=$(cat .tag)
              TAG_PRD=$(sed -En 's/(.*)-dev_(.*)/\1-prd_\2/p' .tag)
              docker pull $IMAGE:$TAG
              echo "Tagging $IMAGE:$TAG to $IMAGE:$TAG_PRD..."
              docker tag $IMAGE:$TAG $IMAGE:$TAG_PRD
              docker push $IMAGE:$TAG_PRD
            displayName: Tag container for release

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"

	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StratosAzStgv1 struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StratosAzStgv1Spec   `json:"spec,omitempty"`
	Status            StratosAzStgv1Status `json:"status,omitempty"`
}

type StratosAzStgv1Spec struct {
	// +optional
	SecretRef   *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
	ProviderRef core.LocalObjectReference  `json:"providerRef" tf:"-"`
	// +optional
	Source string `json:"source" tf:"source"`

	// +optional
	// Account Kind
	AccountKind string `json:"accountKind,omitempty" tf:"account_kind,omitempty"`
	// +optional
	// Account tier default is Standard
	AccountTier string `json:"accountTier,omitempty" tf:"account_tier,omitempty"`
	// +optional
	// The tags to associate with assets
	AdditionalTags map[string]string `json:"additionalTags,omitempty" tf:"additional_tags,omitempty"`
	// +optional
	// List of Blobs
	Blobs []StratosAzStgv1Blobs `json:"blobs,omitempty" tf:"blobs,omitempty"`
	// +optional
	// The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
	Containers []string `json:"containers,omitempty" tf:"containers,omitempty"`
	// Environment. Upto 5 character. For e.g. dev, dev01 , prd01
	Environment string `json:"environment" tf:"environment"`
	// +optional
	// The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
	ExistingResourceGroup string `json:"existingResourceGroup,omitempty" tf:"existing_resource_group,omitempty"`
	// +optional
	// Instance number
	Instance string `json:"instance,omitempty" tf:"instance,omitempty"`
	// +optional
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty" tf:"is_hns_enabled,omitempty"`
	// +optional
	// Azure Keyvault name to store SQL password
	KvName string `json:"kvName,omitempty" tf:"kv_name,omitempty"`
	// +optional
	// Azure Keyvault resource group name for SQL password
	KvResourceGroupName string `json:"kvResourceGroupName,omitempty" tf:"kv_resource_group_name,omitempty"`
	// Specifies the name Prefix of storage account in which to create the storage container. Changing this forces a new resource to be created.
	NamePrefix string `json:"namePrefix" tf:"namePrefix"`
	// owner
	Owner string `json:"owner" tf:"owner"`
	// +optional
	// placement
	Placement string `json:"placement,omitempty" tf:"placement,omitempty"`
	// +optional
	// project stream name
	Project string `json:"project,omitempty" tf:"project,omitempty"`
	//  4 character project stream name/code
	ProjectStream string `json:"projectStream" tf:"projectStream"`
	// +optional
	// List of Storage Queues
	Queues []string `json:"queues,omitempty" tf:"queues,omitempty"`
	// region. Choose from australia, europe, asia, europe
	Region string `json:"region" tf:"region"`
	// +optional
	// releaseVersion
	ReleaseVersion string `json:"releaseVersion,omitempty" tf:"releaseVersion,omitempty"`
	// +optional
	// Sepcify replication type default is LRS
	ReplicationType string `json:"replicationType,omitempty" tf:"replication_type,omitempty"`
	// +optional
	// List of Storage shares
	Shares []StratosAzStgv1Shares `json:"shares,omitempty" tf:"shares,omitempty"`
	// +optional
	// List of storage tables
	Tables []string `json:"tables,omitempty" tf:"tables,omitempty"`
	//  4 character project stream name/code
	WorkStream string `json:"workStream" tf:"workStream"`
}

type StratosAzStgv1Blobs struct {
	// +optional
	Name string `json:"name,omitempty" tf:"name,omitempty"`
	// +optional
	Type string `json:"type,omitempty" tf:"type,omitempty"`
}

type StratosAzStgv1Shares struct {
	// +optional
	Name string `json:"name,omitempty" tf:"name,omitempty"`
	// +optional
	Quota json.Number `json:"quota,omitempty" tf:"quota,omitempty"`
}

type StratosAzStgv1Output struct {
	//
	// +optional
	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`
}

type StratosAzStgv1Status struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *StratosAzStgv1Output `json:"output,omitempty"`
	// +optional
	State string `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	TerraformErrors []string `json:"terraformErrors,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StratosAzStgv1List is a list of StratosAzStgv1s
type StratosAzStgv1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StratosAzStgv1 CRD objects
	Items []StratosAzStgv1 `json:"items,omitempty"`
}

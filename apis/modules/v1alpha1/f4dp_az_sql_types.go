/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"

	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type F4dpAzSql struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              F4dpAzSqlSpec   `json:"spec,omitempty"`
	Status            F4dpAzSqlStatus `json:"status,omitempty"`
}

type F4dpAzSqlSpec struct {
	// +optional
	SecretRef   *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
	ProviderRef core.LocalObjectReference  `json:"providerRef" tf:"-"`
	// +optional
	Source string `json:"source" tf:"source"`

	// +optional
	// Additional set of tags
	AdditionalTags map[string]string `json:"additionalTags,omitempty" tf:"additional_tags,omitempty"`
	// +optional
	// The tags to associate with assets
	CommonTags map[string]string `json:"commonTags,omitempty" tf:"common_tags,omitempty"`
	// +optional
	// If set to true, enable Failover Group
	EnableHA *bool `json:"enableHA,omitempty" tf:"enable_HA,omitempty"`
	// +optional
	// if existing resource group need to be used
	ExistingRg *bool `json:"existingRg,omitempty" tf:"existing_rg,omitempty"`
	// +optional
	// existing resource group name
	ExistingRgName string `json:"existingRgName,omitempty" tf:"existing_rg_name,omitempty"`
	// +optional
	// Location of primary server
	LocationPrimary string `json:"locationPrimary,omitempty" tf:"location_primary,omitempty"`
	// +optional
	// Location of primary server
	LocationSecondary string `json:"locationSecondary,omitempty" tf:"location_secondary,omitempty"`
	// +optional
	// Resource Group Name
	RgName string `json:"rgName,omitempty" tf:"rg_name,omitempty"`
	// SQL Server username
	SqlAdminUsername string `json:"sqlAdminUsername" tf:"sql_admin_username"`
	// +optional
	// Edition of the SQL DB
	SqlDbEdition string `json:"sqlDbEdition,omitempty" tf:"sql_db_edition,omitempty"`
	// Name of the SQL DB
	SqlDbName string `json:"sqlDbName" tf:"sql_db_name"`
	// +optional
	// Requested Service Objective Name of the SQL DB
	SqlDbRequestedServiceObjectiveName string `json:"sqlDbRequestedServiceObjectiveName,omitempty" tf:"sql_db_requested_service_objective_name,omitempty"`
	// +optional
	/*
	   Map of SQL Firewall Rules in the following format:

	     "Name" = ["StartIP", "EndIP"]

	*/
	SqlFwRules map[string]json.RawMessage `json:"sqlFwRules,omitempty" tf:"sql_fw_rules,omitempty"`
	// Name of the SQL Server
	SqlServerName string `json:"sqlServerName" tf:"sql_server_name"`
}

type F4dpAzSqlOutput struct {
	//
	// +optional
	SqlPassword string `json:"sqlPassword" tf:"sql_password"`
}

type F4dpAzSqlStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *F4dpAzSqlOutput `json:"output,omitempty"`
	// +optional
	State string `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// F4dpAzSqlList is a list of F4dpAzSqls
type F4dpAzSqlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of F4dpAzSql CRD objects
	Items []F4dpAzSql `json:"items,omitempty"`
}

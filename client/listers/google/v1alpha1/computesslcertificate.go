/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/google/v1alpha1"
)

// ComputeSslCertificateLister helps list ComputeSslCertificates.
type ComputeSslCertificateLister interface {
	// List lists all ComputeSslCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeSslCertificate, err error)
	// ComputeSslCertificates returns an object that can list and get ComputeSslCertificates.
	ComputeSslCertificates(namespace string) ComputeSslCertificateNamespaceLister
	ComputeSslCertificateListerExpansion
}

// computeSslCertificateLister implements the ComputeSslCertificateLister interface.
type computeSslCertificateLister struct {
	indexer cache.Indexer
}

// NewComputeSslCertificateLister returns a new ComputeSslCertificateLister.
func NewComputeSslCertificateLister(indexer cache.Indexer) ComputeSslCertificateLister {
	return &computeSslCertificateLister{indexer: indexer}
}

// List lists all ComputeSslCertificates in the indexer.
func (s *computeSslCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeSslCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeSslCertificate))
	})
	return ret, err
}

// ComputeSslCertificates returns an object that can list and get ComputeSslCertificates.
func (s *computeSslCertificateLister) ComputeSslCertificates(namespace string) ComputeSslCertificateNamespaceLister {
	return computeSslCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeSslCertificateNamespaceLister helps list and get ComputeSslCertificates.
type ComputeSslCertificateNamespaceLister interface {
	// List lists all ComputeSslCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComputeSslCertificate, err error)
	// Get retrieves the ComputeSslCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComputeSslCertificate, error)
	ComputeSslCertificateNamespaceListerExpansion
}

// computeSslCertificateNamespaceLister implements the ComputeSslCertificateNamespaceLister
// interface.
type computeSslCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeSslCertificates in the indexer for a given namespace.
func (s computeSslCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComputeSslCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComputeSslCertificate))
	})
	return ret, err
}

// Get retrieves the ComputeSslCertificate from the indexer for a given namespace and name.
func (s computeSslCertificateNamespaceLister) Get(name string) (*v1alpha1.ComputeSslCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("computesslcertificate"), name)
	}
	return obj.(*v1alpha1.ComputeSslCertificate), nil
}

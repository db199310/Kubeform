/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
)

// LbSslNegotiationPolicyLister helps list LbSslNegotiationPolicies.
type LbSslNegotiationPolicyLister interface {
	// List lists all LbSslNegotiationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LbSslNegotiationPolicy, err error)
	// LbSslNegotiationPolicies returns an object that can list and get LbSslNegotiationPolicies.
	LbSslNegotiationPolicies(namespace string) LbSslNegotiationPolicyNamespaceLister
	LbSslNegotiationPolicyListerExpansion
}

// lbSslNegotiationPolicyLister implements the LbSslNegotiationPolicyLister interface.
type lbSslNegotiationPolicyLister struct {
	indexer cache.Indexer
}

// NewLbSslNegotiationPolicyLister returns a new LbSslNegotiationPolicyLister.
func NewLbSslNegotiationPolicyLister(indexer cache.Indexer) LbSslNegotiationPolicyLister {
	return &lbSslNegotiationPolicyLister{indexer: indexer}
}

// List lists all LbSslNegotiationPolicies in the indexer.
func (s *lbSslNegotiationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LbSslNegotiationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbSslNegotiationPolicy))
	})
	return ret, err
}

// LbSslNegotiationPolicies returns an object that can list and get LbSslNegotiationPolicies.
func (s *lbSslNegotiationPolicyLister) LbSslNegotiationPolicies(namespace string) LbSslNegotiationPolicyNamespaceLister {
	return lbSslNegotiationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbSslNegotiationPolicyNamespaceLister helps list and get LbSslNegotiationPolicies.
type LbSslNegotiationPolicyNamespaceLister interface {
	// List lists all LbSslNegotiationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LbSslNegotiationPolicy, err error)
	// Get retrieves the LbSslNegotiationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LbSslNegotiationPolicy, error)
	LbSslNegotiationPolicyNamespaceListerExpansion
}

// lbSslNegotiationPolicyNamespaceLister implements the LbSslNegotiationPolicyNamespaceLister
// interface.
type lbSslNegotiationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LbSslNegotiationPolicies in the indexer for a given namespace.
func (s lbSslNegotiationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LbSslNegotiationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbSslNegotiationPolicy))
	})
	return ret, err
}

// Get retrieves the LbSslNegotiationPolicy from the indexer for a given namespace and name.
func (s lbSslNegotiationPolicyNamespaceLister) Get(name string) (*v1alpha1.LbSslNegotiationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lbsslnegotiationpolicy"), name)
	}
	return obj.(*v1alpha1.LbSslNegotiationPolicy), nil
}

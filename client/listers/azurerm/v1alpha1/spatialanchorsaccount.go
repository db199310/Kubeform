/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// SpatialAnchorsAccountLister helps list SpatialAnchorsAccounts.
type SpatialAnchorsAccountLister interface {
	// List lists all SpatialAnchorsAccounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpatialAnchorsAccount, err error)
	// SpatialAnchorsAccounts returns an object that can list and get SpatialAnchorsAccounts.
	SpatialAnchorsAccounts(namespace string) SpatialAnchorsAccountNamespaceLister
	SpatialAnchorsAccountListerExpansion
}

// spatialAnchorsAccountLister implements the SpatialAnchorsAccountLister interface.
type spatialAnchorsAccountLister struct {
	indexer cache.Indexer
}

// NewSpatialAnchorsAccountLister returns a new SpatialAnchorsAccountLister.
func NewSpatialAnchorsAccountLister(indexer cache.Indexer) SpatialAnchorsAccountLister {
	return &spatialAnchorsAccountLister{indexer: indexer}
}

// List lists all SpatialAnchorsAccounts in the indexer.
func (s *spatialAnchorsAccountLister) List(selector labels.Selector) (ret []*v1alpha1.SpatialAnchorsAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpatialAnchorsAccount))
	})
	return ret, err
}

// SpatialAnchorsAccounts returns an object that can list and get SpatialAnchorsAccounts.
func (s *spatialAnchorsAccountLister) SpatialAnchorsAccounts(namespace string) SpatialAnchorsAccountNamespaceLister {
	return spatialAnchorsAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpatialAnchorsAccountNamespaceLister helps list and get SpatialAnchorsAccounts.
type SpatialAnchorsAccountNamespaceLister interface {
	// List lists all SpatialAnchorsAccounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpatialAnchorsAccount, err error)
	// Get retrieves the SpatialAnchorsAccount from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpatialAnchorsAccount, error)
	SpatialAnchorsAccountNamespaceListerExpansion
}

// spatialAnchorsAccountNamespaceLister implements the SpatialAnchorsAccountNamespaceLister
// interface.
type spatialAnchorsAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpatialAnchorsAccounts in the indexer for a given namespace.
func (s spatialAnchorsAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpatialAnchorsAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpatialAnchorsAccount))
	})
	return ret, err
}

// Get retrieves the SpatialAnchorsAccount from the indexer for a given namespace and name.
func (s spatialAnchorsAccountNamespaceLister) Get(name string) (*v1alpha1.SpatialAnchorsAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spatialanchorsaccount"), name)
	}
	return obj.(*v1alpha1.SpatialAnchorsAccount), nil
}

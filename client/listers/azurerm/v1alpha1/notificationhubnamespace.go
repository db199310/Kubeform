/*
Copyright 2019 The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// NotificationHubNamespaceLister helps list NotificationHubNamespaces.
type NotificationHubNamespaceLister interface {
	// List lists all NotificationHubNamespaces in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace, err error)
	// NotificationHubNamespaces returns an object that can list and get NotificationHubNamespaces.
	NotificationHubNamespaces(namespace string) NotificationHubNamespaceNamespaceLister
	NotificationHubNamespaceListerExpansion
}

// notificationHubNamespaceLister implements the NotificationHubNamespaceLister interface.
type notificationHubNamespaceLister struct {
	indexer cache.Indexer
}

// NewNotificationHubNamespaceLister returns a new NotificationHubNamespaceLister.
func NewNotificationHubNamespaceLister(indexer cache.Indexer) NotificationHubNamespaceLister {
	return &notificationHubNamespaceLister{indexer: indexer}
}

// List lists all NotificationHubNamespaces in the indexer.
func (s *notificationHubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationHubNamespace))
	})
	return ret, err
}

// NotificationHubNamespaces returns an object that can list and get NotificationHubNamespaces.
func (s *notificationHubNamespaceLister) NotificationHubNamespaces(namespace string) NotificationHubNamespaceNamespaceLister {
	return notificationHubNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationHubNamespaceNamespaceLister helps list and get NotificationHubNamespaces.
type NotificationHubNamespaceNamespaceLister interface {
	// List lists all NotificationHubNamespaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace, err error)
	// Get retrieves the NotificationHubNamespace from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NotificationHubNamespace, error)
	NotificationHubNamespaceNamespaceListerExpansion
}

// notificationHubNamespaceNamespaceLister implements the NotificationHubNamespaceNamespaceLister
// interface.
type notificationHubNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationHubNamespaces in the indexer for a given namespace.
func (s notificationHubNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationHubNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationHubNamespace))
	})
	return ret, err
}

// Get retrieves the NotificationHubNamespace from the indexer for a given namespace and name.
func (s notificationHubNamespaceNamespaceLister) Get(name string) (*v1alpha1.NotificationHubNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationhubnamespace"), name)
	}
	return obj.(*v1alpha1.NotificationHubNamespace), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// SpringCloudAppLister helps list SpringCloudApps.
type SpringCloudAppLister interface {
	// List lists all SpringCloudApps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpringCloudApp, err error)
	// SpringCloudApps returns an object that can list and get SpringCloudApps.
	SpringCloudApps(namespace string) SpringCloudAppNamespaceLister
	SpringCloudAppListerExpansion
}

// springCloudAppLister implements the SpringCloudAppLister interface.
type springCloudAppLister struct {
	indexer cache.Indexer
}

// NewSpringCloudAppLister returns a new SpringCloudAppLister.
func NewSpringCloudAppLister(indexer cache.Indexer) SpringCloudAppLister {
	return &springCloudAppLister{indexer: indexer}
}

// List lists all SpringCloudApps in the indexer.
func (s *springCloudAppLister) List(selector labels.Selector) (ret []*v1alpha1.SpringCloudApp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpringCloudApp))
	})
	return ret, err
}

// SpringCloudApps returns an object that can list and get SpringCloudApps.
func (s *springCloudAppLister) SpringCloudApps(namespace string) SpringCloudAppNamespaceLister {
	return springCloudAppNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpringCloudAppNamespaceLister helps list and get SpringCloudApps.
type SpringCloudAppNamespaceLister interface {
	// List lists all SpringCloudApps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpringCloudApp, err error)
	// Get retrieves the SpringCloudApp from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpringCloudApp, error)
	SpringCloudAppNamespaceListerExpansion
}

// springCloudAppNamespaceLister implements the SpringCloudAppNamespaceLister
// interface.
type springCloudAppNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpringCloudApps in the indexer for a given namespace.
func (s springCloudAppNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpringCloudApp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpringCloudApp))
	})
	return ret, err
}

// Get retrieves the SpringCloudApp from the indexer for a given namespace and name.
func (s springCloudAppNamespaceLister) Get(name string) (*v1alpha1.SpringCloudApp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("springcloudapp"), name)
	}
	return obj.(*v1alpha1.SpringCloudApp), nil
}

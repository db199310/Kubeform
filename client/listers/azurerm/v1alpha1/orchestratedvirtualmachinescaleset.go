/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// OrchestratedVirtualMachineScaleSetLister helps list OrchestratedVirtualMachineScaleSets.
type OrchestratedVirtualMachineScaleSetLister interface {
	// List lists all OrchestratedVirtualMachineScaleSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OrchestratedVirtualMachineScaleSet, err error)
	// OrchestratedVirtualMachineScaleSets returns an object that can list and get OrchestratedVirtualMachineScaleSets.
	OrchestratedVirtualMachineScaleSets(namespace string) OrchestratedVirtualMachineScaleSetNamespaceLister
	OrchestratedVirtualMachineScaleSetListerExpansion
}

// orchestratedVirtualMachineScaleSetLister implements the OrchestratedVirtualMachineScaleSetLister interface.
type orchestratedVirtualMachineScaleSetLister struct {
	indexer cache.Indexer
}

// NewOrchestratedVirtualMachineScaleSetLister returns a new OrchestratedVirtualMachineScaleSetLister.
func NewOrchestratedVirtualMachineScaleSetLister(indexer cache.Indexer) OrchestratedVirtualMachineScaleSetLister {
	return &orchestratedVirtualMachineScaleSetLister{indexer: indexer}
}

// List lists all OrchestratedVirtualMachineScaleSets in the indexer.
func (s *orchestratedVirtualMachineScaleSetLister) List(selector labels.Selector) (ret []*v1alpha1.OrchestratedVirtualMachineScaleSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrchestratedVirtualMachineScaleSet))
	})
	return ret, err
}

// OrchestratedVirtualMachineScaleSets returns an object that can list and get OrchestratedVirtualMachineScaleSets.
func (s *orchestratedVirtualMachineScaleSetLister) OrchestratedVirtualMachineScaleSets(namespace string) OrchestratedVirtualMachineScaleSetNamespaceLister {
	return orchestratedVirtualMachineScaleSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrchestratedVirtualMachineScaleSetNamespaceLister helps list and get OrchestratedVirtualMachineScaleSets.
type OrchestratedVirtualMachineScaleSetNamespaceLister interface {
	// List lists all OrchestratedVirtualMachineScaleSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OrchestratedVirtualMachineScaleSet, err error)
	// Get retrieves the OrchestratedVirtualMachineScaleSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OrchestratedVirtualMachineScaleSet, error)
	OrchestratedVirtualMachineScaleSetNamespaceListerExpansion
}

// orchestratedVirtualMachineScaleSetNamespaceLister implements the OrchestratedVirtualMachineScaleSetNamespaceLister
// interface.
type orchestratedVirtualMachineScaleSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OrchestratedVirtualMachineScaleSets in the indexer for a given namespace.
func (s orchestratedVirtualMachineScaleSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OrchestratedVirtualMachineScaleSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrchestratedVirtualMachineScaleSet))
	})
	return ret, err
}

// Get retrieves the OrchestratedVirtualMachineScaleSet from the indexer for a given namespace and name.
func (s orchestratedVirtualMachineScaleSetNamespaceLister) Get(name string) (*v1alpha1.OrchestratedVirtualMachineScaleSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("orchestratedvirtualmachinescaleset"), name)
	}
	return obj.(*v1alpha1.OrchestratedVirtualMachineScaleSet), nil
}

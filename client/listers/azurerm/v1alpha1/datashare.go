/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// DataShareLister helps list DataShares.
type DataShareLister interface {
	// List lists all DataShares in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataShare, err error)
	// DataShares returns an object that can list and get DataShares.
	DataShares(namespace string) DataShareNamespaceLister
	DataShareListerExpansion
}

// dataShareLister implements the DataShareLister interface.
type dataShareLister struct {
	indexer cache.Indexer
}

// NewDataShareLister returns a new DataShareLister.
func NewDataShareLister(indexer cache.Indexer) DataShareLister {
	return &dataShareLister{indexer: indexer}
}

// List lists all DataShares in the indexer.
func (s *dataShareLister) List(selector labels.Selector) (ret []*v1alpha1.DataShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataShare))
	})
	return ret, err
}

// DataShares returns an object that can list and get DataShares.
func (s *dataShareLister) DataShares(namespace string) DataShareNamespaceLister {
	return dataShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataShareNamespaceLister helps list and get DataShares.
type DataShareNamespaceLister interface {
	// List lists all DataShares in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataShare, err error)
	// Get retrieves the DataShare from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataShare, error)
	DataShareNamespaceListerExpansion
}

// dataShareNamespaceLister implements the DataShareNamespaceLister
// interface.
type dataShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataShares in the indexer for a given namespace.
func (s dataShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataShare))
	})
	return ret, err
}

// Get retrieves the DataShare from the indexer for a given namespace and name.
func (s dataShareNamespaceLister) Get(name string) (*v1alpha1.DataShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datashare"), name)
	}
	return obj.(*v1alpha1.DataShare), nil
}

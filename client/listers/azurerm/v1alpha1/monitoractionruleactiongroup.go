/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// MonitorActionRuleActionGroupLister helps list MonitorActionRuleActionGroups.
type MonitorActionRuleActionGroupLister interface {
	// List lists all MonitorActionRuleActionGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorActionRuleActionGroup, err error)
	// MonitorActionRuleActionGroups returns an object that can list and get MonitorActionRuleActionGroups.
	MonitorActionRuleActionGroups(namespace string) MonitorActionRuleActionGroupNamespaceLister
	MonitorActionRuleActionGroupListerExpansion
}

// monitorActionRuleActionGroupLister implements the MonitorActionRuleActionGroupLister interface.
type monitorActionRuleActionGroupLister struct {
	indexer cache.Indexer
}

// NewMonitorActionRuleActionGroupLister returns a new MonitorActionRuleActionGroupLister.
func NewMonitorActionRuleActionGroupLister(indexer cache.Indexer) MonitorActionRuleActionGroupLister {
	return &monitorActionRuleActionGroupLister{indexer: indexer}
}

// List lists all MonitorActionRuleActionGroups in the indexer.
func (s *monitorActionRuleActionGroupLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorActionRuleActionGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorActionRuleActionGroup))
	})
	return ret, err
}

// MonitorActionRuleActionGroups returns an object that can list and get MonitorActionRuleActionGroups.
func (s *monitorActionRuleActionGroupLister) MonitorActionRuleActionGroups(namespace string) MonitorActionRuleActionGroupNamespaceLister {
	return monitorActionRuleActionGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitorActionRuleActionGroupNamespaceLister helps list and get MonitorActionRuleActionGroups.
type MonitorActionRuleActionGroupNamespaceLister interface {
	// List lists all MonitorActionRuleActionGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorActionRuleActionGroup, err error)
	// Get retrieves the MonitorActionRuleActionGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MonitorActionRuleActionGroup, error)
	MonitorActionRuleActionGroupNamespaceListerExpansion
}

// monitorActionRuleActionGroupNamespaceLister implements the MonitorActionRuleActionGroupNamespaceLister
// interface.
type monitorActionRuleActionGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitorActionRuleActionGroups in the indexer for a given namespace.
func (s monitorActionRuleActionGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorActionRuleActionGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorActionRuleActionGroup))
	})
	return ret, err
}

// Get retrieves the MonitorActionRuleActionGroup from the indexer for a given namespace and name.
func (s monitorActionRuleActionGroupNamespaceLister) Get(name string) (*v1alpha1.MonitorActionRuleActionGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitoractionruleactiongroup"), name)
	}
	return obj.(*v1alpha1.MonitorActionRuleActionGroup), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// ServicebusNamespaceNetworkRuleSetLister helps list ServicebusNamespaceNetworkRuleSets.
type ServicebusNamespaceNetworkRuleSetLister interface {
	// List lists all ServicebusNamespaceNetworkRuleSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceNetworkRuleSet, err error)
	// ServicebusNamespaceNetworkRuleSets returns an object that can list and get ServicebusNamespaceNetworkRuleSets.
	ServicebusNamespaceNetworkRuleSets(namespace string) ServicebusNamespaceNetworkRuleSetNamespaceLister
	ServicebusNamespaceNetworkRuleSetListerExpansion
}

// servicebusNamespaceNetworkRuleSetLister implements the ServicebusNamespaceNetworkRuleSetLister interface.
type servicebusNamespaceNetworkRuleSetLister struct {
	indexer cache.Indexer
}

// NewServicebusNamespaceNetworkRuleSetLister returns a new ServicebusNamespaceNetworkRuleSetLister.
func NewServicebusNamespaceNetworkRuleSetLister(indexer cache.Indexer) ServicebusNamespaceNetworkRuleSetLister {
	return &servicebusNamespaceNetworkRuleSetLister{indexer: indexer}
}

// List lists all ServicebusNamespaceNetworkRuleSets in the indexer.
func (s *servicebusNamespaceNetworkRuleSetLister) List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceNetworkRuleSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicebusNamespaceNetworkRuleSet))
	})
	return ret, err
}

// ServicebusNamespaceNetworkRuleSets returns an object that can list and get ServicebusNamespaceNetworkRuleSets.
func (s *servicebusNamespaceNetworkRuleSetLister) ServicebusNamespaceNetworkRuleSets(namespace string) ServicebusNamespaceNetworkRuleSetNamespaceLister {
	return servicebusNamespaceNetworkRuleSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicebusNamespaceNetworkRuleSetNamespaceLister helps list and get ServicebusNamespaceNetworkRuleSets.
type ServicebusNamespaceNetworkRuleSetNamespaceLister interface {
	// List lists all ServicebusNamespaceNetworkRuleSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceNetworkRuleSet, err error)
	// Get retrieves the ServicebusNamespaceNetworkRuleSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServicebusNamespaceNetworkRuleSet, error)
	ServicebusNamespaceNetworkRuleSetNamespaceListerExpansion
}

// servicebusNamespaceNetworkRuleSetNamespaceLister implements the ServicebusNamespaceNetworkRuleSetNamespaceLister
// interface.
type servicebusNamespaceNetworkRuleSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicebusNamespaceNetworkRuleSets in the indexer for a given namespace.
func (s servicebusNamespaceNetworkRuleSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicebusNamespaceNetworkRuleSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicebusNamespaceNetworkRuleSet))
	})
	return ret, err
}

// Get retrieves the ServicebusNamespaceNetworkRuleSet from the indexer for a given namespace and name.
func (s servicebusNamespaceNetworkRuleSetNamespaceLister) Get(name string) (*v1alpha1.ServicebusNamespaceNetworkRuleSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicebusnamespacenetworkruleset"), name)
	}
	return obj.(*v1alpha1.ServicebusNamespaceNetworkRuleSet), nil
}

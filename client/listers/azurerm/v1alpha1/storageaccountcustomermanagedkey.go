/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// StorageAccountCustomerManagedKeyLister helps list StorageAccountCustomerManagedKeys.
type StorageAccountCustomerManagedKeyLister interface {
	// List lists all StorageAccountCustomerManagedKeys in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageAccountCustomerManagedKey, err error)
	// StorageAccountCustomerManagedKeys returns an object that can list and get StorageAccountCustomerManagedKeys.
	StorageAccountCustomerManagedKeys(namespace string) StorageAccountCustomerManagedKeyNamespaceLister
	StorageAccountCustomerManagedKeyListerExpansion
}

// storageAccountCustomerManagedKeyLister implements the StorageAccountCustomerManagedKeyLister interface.
type storageAccountCustomerManagedKeyLister struct {
	indexer cache.Indexer
}

// NewStorageAccountCustomerManagedKeyLister returns a new StorageAccountCustomerManagedKeyLister.
func NewStorageAccountCustomerManagedKeyLister(indexer cache.Indexer) StorageAccountCustomerManagedKeyLister {
	return &storageAccountCustomerManagedKeyLister{indexer: indexer}
}

// List lists all StorageAccountCustomerManagedKeys in the indexer.
func (s *storageAccountCustomerManagedKeyLister) List(selector labels.Selector) (ret []*v1alpha1.StorageAccountCustomerManagedKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageAccountCustomerManagedKey))
	})
	return ret, err
}

// StorageAccountCustomerManagedKeys returns an object that can list and get StorageAccountCustomerManagedKeys.
func (s *storageAccountCustomerManagedKeyLister) StorageAccountCustomerManagedKeys(namespace string) StorageAccountCustomerManagedKeyNamespaceLister {
	return storageAccountCustomerManagedKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageAccountCustomerManagedKeyNamespaceLister helps list and get StorageAccountCustomerManagedKeys.
type StorageAccountCustomerManagedKeyNamespaceLister interface {
	// List lists all StorageAccountCustomerManagedKeys in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageAccountCustomerManagedKey, err error)
	// Get retrieves the StorageAccountCustomerManagedKey from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageAccountCustomerManagedKey, error)
	StorageAccountCustomerManagedKeyNamespaceListerExpansion
}

// storageAccountCustomerManagedKeyNamespaceLister implements the StorageAccountCustomerManagedKeyNamespaceLister
// interface.
type storageAccountCustomerManagedKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageAccountCustomerManagedKeys in the indexer for a given namespace.
func (s storageAccountCustomerManagedKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageAccountCustomerManagedKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageAccountCustomerManagedKey))
	})
	return ret, err
}

// Get retrieves the StorageAccountCustomerManagedKey from the indexer for a given namespace and name.
func (s storageAccountCustomerManagedKeyNamespaceLister) Get(name string) (*v1alpha1.StorageAccountCustomerManagedKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storageaccountcustomermanagedkey"), name)
	}
	return obj.(*v1alpha1.StorageAccountCustomerManagedKey), nil
}

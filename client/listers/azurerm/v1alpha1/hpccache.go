/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// HpcCacheLister helps list HpcCaches.
type HpcCacheLister interface {
	// List lists all HpcCaches in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HpcCache, err error)
	// HpcCaches returns an object that can list and get HpcCaches.
	HpcCaches(namespace string) HpcCacheNamespaceLister
	HpcCacheListerExpansion
}

// hpcCacheLister implements the HpcCacheLister interface.
type hpcCacheLister struct {
	indexer cache.Indexer
}

// NewHpcCacheLister returns a new HpcCacheLister.
func NewHpcCacheLister(indexer cache.Indexer) HpcCacheLister {
	return &hpcCacheLister{indexer: indexer}
}

// List lists all HpcCaches in the indexer.
func (s *hpcCacheLister) List(selector labels.Selector) (ret []*v1alpha1.HpcCache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HpcCache))
	})
	return ret, err
}

// HpcCaches returns an object that can list and get HpcCaches.
func (s *hpcCacheLister) HpcCaches(namespace string) HpcCacheNamespaceLister {
	return hpcCacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HpcCacheNamespaceLister helps list and get HpcCaches.
type HpcCacheNamespaceLister interface {
	// List lists all HpcCaches in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HpcCache, err error)
	// Get retrieves the HpcCache from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HpcCache, error)
	HpcCacheNamespaceListerExpansion
}

// hpcCacheNamespaceLister implements the HpcCacheNamespaceLister
// interface.
type hpcCacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HpcCaches in the indexer for a given namespace.
func (s hpcCacheNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HpcCache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HpcCache))
	})
	return ret, err
}

// Get retrieves the HpcCache from the indexer for a given namespace and name.
func (s hpcCacheNamespaceLister) Get(name string) (*v1alpha1.HpcCache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hpccache"), name)
	}
	return obj.(*v1alpha1.HpcCache), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// DataShareAccountLister helps list DataShareAccounts.
type DataShareAccountLister interface {
	// List lists all DataShareAccounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataShareAccount, err error)
	// DataShareAccounts returns an object that can list and get DataShareAccounts.
	DataShareAccounts(namespace string) DataShareAccountNamespaceLister
	DataShareAccountListerExpansion
}

// dataShareAccountLister implements the DataShareAccountLister interface.
type dataShareAccountLister struct {
	indexer cache.Indexer
}

// NewDataShareAccountLister returns a new DataShareAccountLister.
func NewDataShareAccountLister(indexer cache.Indexer) DataShareAccountLister {
	return &dataShareAccountLister{indexer: indexer}
}

// List lists all DataShareAccounts in the indexer.
func (s *dataShareAccountLister) List(selector labels.Selector) (ret []*v1alpha1.DataShareAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataShareAccount))
	})
	return ret, err
}

// DataShareAccounts returns an object that can list and get DataShareAccounts.
func (s *dataShareAccountLister) DataShareAccounts(namespace string) DataShareAccountNamespaceLister {
	return dataShareAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataShareAccountNamespaceLister helps list and get DataShareAccounts.
type DataShareAccountNamespaceLister interface {
	// List lists all DataShareAccounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataShareAccount, err error)
	// Get retrieves the DataShareAccount from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataShareAccount, error)
	DataShareAccountNamespaceListerExpansion
}

// dataShareAccountNamespaceLister implements the DataShareAccountNamespaceLister
// interface.
type dataShareAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataShareAccounts in the indexer for a given namespace.
func (s dataShareAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataShareAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataShareAccount))
	})
	return ret, err
}

// Get retrieves the DataShareAccount from the indexer for a given namespace and name.
func (s dataShareAccountNamespaceLister) Get(name string) (*v1alpha1.DataShareAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datashareaccount"), name)
	}
	return obj.(*v1alpha1.DataShareAccount), nil
}

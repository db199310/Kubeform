/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// EventgridDomainTopicLister helps list EventgridDomainTopics.
type EventgridDomainTopicLister interface {
	// List lists all EventgridDomainTopics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridDomainTopic, err error)
	// EventgridDomainTopics returns an object that can list and get EventgridDomainTopics.
	EventgridDomainTopics(namespace string) EventgridDomainTopicNamespaceLister
	EventgridDomainTopicListerExpansion
}

// eventgridDomainTopicLister implements the EventgridDomainTopicLister interface.
type eventgridDomainTopicLister struct {
	indexer cache.Indexer
}

// NewEventgridDomainTopicLister returns a new EventgridDomainTopicLister.
func NewEventgridDomainTopicLister(indexer cache.Indexer) EventgridDomainTopicLister {
	return &eventgridDomainTopicLister{indexer: indexer}
}

// List lists all EventgridDomainTopics in the indexer.
func (s *eventgridDomainTopicLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridDomainTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridDomainTopic))
	})
	return ret, err
}

// EventgridDomainTopics returns an object that can list and get EventgridDomainTopics.
func (s *eventgridDomainTopicLister) EventgridDomainTopics(namespace string) EventgridDomainTopicNamespaceLister {
	return eventgridDomainTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventgridDomainTopicNamespaceLister helps list and get EventgridDomainTopics.
type EventgridDomainTopicNamespaceLister interface {
	// List lists all EventgridDomainTopics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridDomainTopic, err error)
	// Get retrieves the EventgridDomainTopic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventgridDomainTopic, error)
	EventgridDomainTopicNamespaceListerExpansion
}

// eventgridDomainTopicNamespaceLister implements the EventgridDomainTopicNamespaceLister
// interface.
type eventgridDomainTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventgridDomainTopics in the indexer for a given namespace.
func (s eventgridDomainTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridDomainTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridDomainTopic))
	})
	return ret, err
}

// Get retrieves the EventgridDomainTopic from the indexer for a given namespace and name.
func (s eventgridDomainTopicNamespaceLister) Get(name string) (*v1alpha1.EventgridDomainTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventgriddomaintopic"), name)
	}
	return obj.(*v1alpha1.EventgridDomainTopic), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// LogicAppIntegrationAccountLister helps list LogicAppIntegrationAccounts.
type LogicAppIntegrationAccountLister interface {
	// List lists all LogicAppIntegrationAccounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LogicAppIntegrationAccount, err error)
	// LogicAppIntegrationAccounts returns an object that can list and get LogicAppIntegrationAccounts.
	LogicAppIntegrationAccounts(namespace string) LogicAppIntegrationAccountNamespaceLister
	LogicAppIntegrationAccountListerExpansion
}

// logicAppIntegrationAccountLister implements the LogicAppIntegrationAccountLister interface.
type logicAppIntegrationAccountLister struct {
	indexer cache.Indexer
}

// NewLogicAppIntegrationAccountLister returns a new LogicAppIntegrationAccountLister.
func NewLogicAppIntegrationAccountLister(indexer cache.Indexer) LogicAppIntegrationAccountLister {
	return &logicAppIntegrationAccountLister{indexer: indexer}
}

// List lists all LogicAppIntegrationAccounts in the indexer.
func (s *logicAppIntegrationAccountLister) List(selector labels.Selector) (ret []*v1alpha1.LogicAppIntegrationAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogicAppIntegrationAccount))
	})
	return ret, err
}

// LogicAppIntegrationAccounts returns an object that can list and get LogicAppIntegrationAccounts.
func (s *logicAppIntegrationAccountLister) LogicAppIntegrationAccounts(namespace string) LogicAppIntegrationAccountNamespaceLister {
	return logicAppIntegrationAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogicAppIntegrationAccountNamespaceLister helps list and get LogicAppIntegrationAccounts.
type LogicAppIntegrationAccountNamespaceLister interface {
	// List lists all LogicAppIntegrationAccounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LogicAppIntegrationAccount, err error)
	// Get retrieves the LogicAppIntegrationAccount from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LogicAppIntegrationAccount, error)
	LogicAppIntegrationAccountNamespaceListerExpansion
}

// logicAppIntegrationAccountNamespaceLister implements the LogicAppIntegrationAccountNamespaceLister
// interface.
type logicAppIntegrationAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogicAppIntegrationAccounts in the indexer for a given namespace.
func (s logicAppIntegrationAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogicAppIntegrationAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogicAppIntegrationAccount))
	})
	return ret, err
}

// Get retrieves the LogicAppIntegrationAccount from the indexer for a given namespace and name.
func (s logicAppIntegrationAccountNamespaceLister) Get(name string) (*v1alpha1.LogicAppIntegrationAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logicappintegrationaccount"), name)
	}
	return obj.(*v1alpha1.LogicAppIntegrationAccount), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// HpcCacheNfsTargetLister helps list HpcCacheNfsTargets.
type HpcCacheNfsTargetLister interface {
	// List lists all HpcCacheNfsTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HpcCacheNfsTarget, err error)
	// HpcCacheNfsTargets returns an object that can list and get HpcCacheNfsTargets.
	HpcCacheNfsTargets(namespace string) HpcCacheNfsTargetNamespaceLister
	HpcCacheNfsTargetListerExpansion
}

// hpcCacheNfsTargetLister implements the HpcCacheNfsTargetLister interface.
type hpcCacheNfsTargetLister struct {
	indexer cache.Indexer
}

// NewHpcCacheNfsTargetLister returns a new HpcCacheNfsTargetLister.
func NewHpcCacheNfsTargetLister(indexer cache.Indexer) HpcCacheNfsTargetLister {
	return &hpcCacheNfsTargetLister{indexer: indexer}
}

// List lists all HpcCacheNfsTargets in the indexer.
func (s *hpcCacheNfsTargetLister) List(selector labels.Selector) (ret []*v1alpha1.HpcCacheNfsTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HpcCacheNfsTarget))
	})
	return ret, err
}

// HpcCacheNfsTargets returns an object that can list and get HpcCacheNfsTargets.
func (s *hpcCacheNfsTargetLister) HpcCacheNfsTargets(namespace string) HpcCacheNfsTargetNamespaceLister {
	return hpcCacheNfsTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HpcCacheNfsTargetNamespaceLister helps list and get HpcCacheNfsTargets.
type HpcCacheNfsTargetNamespaceLister interface {
	// List lists all HpcCacheNfsTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HpcCacheNfsTarget, err error)
	// Get retrieves the HpcCacheNfsTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HpcCacheNfsTarget, error)
	HpcCacheNfsTargetNamespaceListerExpansion
}

// hpcCacheNfsTargetNamespaceLister implements the HpcCacheNfsTargetNamespaceLister
// interface.
type hpcCacheNfsTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HpcCacheNfsTargets in the indexer for a given namespace.
func (s hpcCacheNfsTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HpcCacheNfsTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HpcCacheNfsTarget))
	})
	return ret, err
}

// Get retrieves the HpcCacheNfsTarget from the indexer for a given namespace and name.
func (s hpcCacheNfsTargetNamespaceLister) Get(name string) (*v1alpha1.HpcCacheNfsTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hpccachenfstarget"), name)
	}
	return obj.(*v1alpha1.HpcCacheNfsTarget), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// HpcCacheBlobTargetLister helps list HpcCacheBlobTargets.
type HpcCacheBlobTargetLister interface {
	// List lists all HpcCacheBlobTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HpcCacheBlobTarget, err error)
	// HpcCacheBlobTargets returns an object that can list and get HpcCacheBlobTargets.
	HpcCacheBlobTargets(namespace string) HpcCacheBlobTargetNamespaceLister
	HpcCacheBlobTargetListerExpansion
}

// hpcCacheBlobTargetLister implements the HpcCacheBlobTargetLister interface.
type hpcCacheBlobTargetLister struct {
	indexer cache.Indexer
}

// NewHpcCacheBlobTargetLister returns a new HpcCacheBlobTargetLister.
func NewHpcCacheBlobTargetLister(indexer cache.Indexer) HpcCacheBlobTargetLister {
	return &hpcCacheBlobTargetLister{indexer: indexer}
}

// List lists all HpcCacheBlobTargets in the indexer.
func (s *hpcCacheBlobTargetLister) List(selector labels.Selector) (ret []*v1alpha1.HpcCacheBlobTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HpcCacheBlobTarget))
	})
	return ret, err
}

// HpcCacheBlobTargets returns an object that can list and get HpcCacheBlobTargets.
func (s *hpcCacheBlobTargetLister) HpcCacheBlobTargets(namespace string) HpcCacheBlobTargetNamespaceLister {
	return hpcCacheBlobTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HpcCacheBlobTargetNamespaceLister helps list and get HpcCacheBlobTargets.
type HpcCacheBlobTargetNamespaceLister interface {
	// List lists all HpcCacheBlobTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HpcCacheBlobTarget, err error)
	// Get retrieves the HpcCacheBlobTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HpcCacheBlobTarget, error)
	HpcCacheBlobTargetNamespaceListerExpansion
}

// hpcCacheBlobTargetNamespaceLister implements the HpcCacheBlobTargetNamespaceLister
// interface.
type hpcCacheBlobTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HpcCacheBlobTargets in the indexer for a given namespace.
func (s hpcCacheBlobTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HpcCacheBlobTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HpcCacheBlobTarget))
	})
	return ret, err
}

// Get retrieves the HpcCacheBlobTarget from the indexer for a given namespace and name.
func (s hpcCacheBlobTargetNamespaceLister) Get(name string) (*v1alpha1.HpcCacheBlobTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hpccacheblobtarget"), name)
	}
	return obj.(*v1alpha1.HpcCacheBlobTarget), nil
}

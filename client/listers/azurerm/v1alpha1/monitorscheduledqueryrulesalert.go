/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
)

// MonitorScheduledQueryRulesAlertLister helps list MonitorScheduledQueryRulesAlerts.
type MonitorScheduledQueryRulesAlertLister interface {
	// List lists all MonitorScheduledQueryRulesAlerts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorScheduledQueryRulesAlert, err error)
	// MonitorScheduledQueryRulesAlerts returns an object that can list and get MonitorScheduledQueryRulesAlerts.
	MonitorScheduledQueryRulesAlerts(namespace string) MonitorScheduledQueryRulesAlertNamespaceLister
	MonitorScheduledQueryRulesAlertListerExpansion
}

// monitorScheduledQueryRulesAlertLister implements the MonitorScheduledQueryRulesAlertLister interface.
type monitorScheduledQueryRulesAlertLister struct {
	indexer cache.Indexer
}

// NewMonitorScheduledQueryRulesAlertLister returns a new MonitorScheduledQueryRulesAlertLister.
func NewMonitorScheduledQueryRulesAlertLister(indexer cache.Indexer) MonitorScheduledQueryRulesAlertLister {
	return &monitorScheduledQueryRulesAlertLister{indexer: indexer}
}

// List lists all MonitorScheduledQueryRulesAlerts in the indexer.
func (s *monitorScheduledQueryRulesAlertLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorScheduledQueryRulesAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorScheduledQueryRulesAlert))
	})
	return ret, err
}

// MonitorScheduledQueryRulesAlerts returns an object that can list and get MonitorScheduledQueryRulesAlerts.
func (s *monitorScheduledQueryRulesAlertLister) MonitorScheduledQueryRulesAlerts(namespace string) MonitorScheduledQueryRulesAlertNamespaceLister {
	return monitorScheduledQueryRulesAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitorScheduledQueryRulesAlertNamespaceLister helps list and get MonitorScheduledQueryRulesAlerts.
type MonitorScheduledQueryRulesAlertNamespaceLister interface {
	// List lists all MonitorScheduledQueryRulesAlerts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorScheduledQueryRulesAlert, err error)
	// Get retrieves the MonitorScheduledQueryRulesAlert from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MonitorScheduledQueryRulesAlert, error)
	MonitorScheduledQueryRulesAlertNamespaceListerExpansion
}

// monitorScheduledQueryRulesAlertNamespaceLister implements the MonitorScheduledQueryRulesAlertNamespaceLister
// interface.
type monitorScheduledQueryRulesAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitorScheduledQueryRulesAlerts in the indexer for a given namespace.
func (s monitorScheduledQueryRulesAlertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorScheduledQueryRulesAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorScheduledQueryRulesAlert))
	})
	return ret, err
}

// Get retrieves the MonitorScheduledQueryRulesAlert from the indexer for a given namespace and name.
func (s monitorScheduledQueryRulesAlertNamespaceLister) Get(name string) (*v1alpha1.MonitorScheduledQueryRulesAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitorscheduledqueryrulesalert"), name)
	}
	return obj.(*v1alpha1.MonitorScheduledQueryRulesAlert), nil
}

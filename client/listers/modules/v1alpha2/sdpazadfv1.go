/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha2 "kubeform.dev/kubeform/apis/modules/v1alpha2"
)

// SDPAzadfv1Lister helps list SDPAzadfv1s.
type SDPAzadfv1Lister interface {
	// List lists all SDPAzadfv1s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.SDPAzadfv1, err error)
	// SDPAzadfv1s returns an object that can list and get SDPAzadfv1s.
	SDPAzadfv1s(namespace string) SDPAzadfv1NamespaceLister
	SDPAzadfv1ListerExpansion
}

// sDPAzadfv1Lister implements the SDPAzadfv1Lister interface.
type sDPAzadfv1Lister struct {
	indexer cache.Indexer
}

// NewSDPAzadfv1Lister returns a new SDPAzadfv1Lister.
func NewSDPAzadfv1Lister(indexer cache.Indexer) SDPAzadfv1Lister {
	return &sDPAzadfv1Lister{indexer: indexer}
}

// List lists all SDPAzadfv1s in the indexer.
func (s *sDPAzadfv1Lister) List(selector labels.Selector) (ret []*v1alpha2.SDPAzadfv1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.SDPAzadfv1))
	})
	return ret, err
}

// SDPAzadfv1s returns an object that can list and get SDPAzadfv1s.
func (s *sDPAzadfv1Lister) SDPAzadfv1s(namespace string) SDPAzadfv1NamespaceLister {
	return sDPAzadfv1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SDPAzadfv1NamespaceLister helps list and get SDPAzadfv1s.
type SDPAzadfv1NamespaceLister interface {
	// List lists all SDPAzadfv1s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.SDPAzadfv1, err error)
	// Get retrieves the SDPAzadfv1 from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.SDPAzadfv1, error)
	SDPAzadfv1NamespaceListerExpansion
}

// sDPAzadfv1NamespaceLister implements the SDPAzadfv1NamespaceLister
// interface.
type sDPAzadfv1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SDPAzadfv1s in the indexer for a given namespace.
func (s sDPAzadfv1NamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.SDPAzadfv1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.SDPAzadfv1))
	})
	return ret, err
}

// Get retrieves the SDPAzadfv1 from the indexer for a given namespace and name.
func (s sDPAzadfv1NamespaceLister) Get(name string) (*v1alpha2.SDPAzadfv1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("sdpazadfv1"), name)
	}
	return obj.(*v1alpha2.SDPAzadfv1), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "kubeform.dev/kubeform/apis/modules/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThomasStorageAccountLister helps list ThomasStorageAccounts.
type ThomasStorageAccountLister interface {
	// List lists all ThomasStorageAccounts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.ThomasStorageAccount, err error)
	// ThomasStorageAccounts returns an object that can list and get ThomasStorageAccounts.
	ThomasStorageAccounts(namespace string) ThomasStorageAccountNamespaceLister
	ThomasStorageAccountListerExpansion
}

// thomasStorageAccountLister implements the ThomasStorageAccountLister interface.
type thomasStorageAccountLister struct {
	indexer cache.Indexer
}

// NewThomasStorageAccountLister returns a new ThomasStorageAccountLister.
func NewThomasStorageAccountLister(indexer cache.Indexer) ThomasStorageAccountLister {
	return &thomasStorageAccountLister{indexer: indexer}
}

// List lists all ThomasStorageAccounts in the indexer.
func (s *thomasStorageAccountLister) List(selector labels.Selector) (ret []*v1alpha2.ThomasStorageAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ThomasStorageAccount))
	})
	return ret, err
}

// ThomasStorageAccounts returns an object that can list and get ThomasStorageAccounts.
func (s *thomasStorageAccountLister) ThomasStorageAccounts(namespace string) ThomasStorageAccountNamespaceLister {
	return thomasStorageAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThomasStorageAccountNamespaceLister helps list and get ThomasStorageAccounts.
type ThomasStorageAccountNamespaceLister interface {
	// List lists all ThomasStorageAccounts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.ThomasStorageAccount, err error)
	// Get retrieves the ThomasStorageAccount from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.ThomasStorageAccount, error)
	ThomasStorageAccountNamespaceListerExpansion
}

// thomasStorageAccountNamespaceLister implements the ThomasStorageAccountNamespaceLister
// interface.
type thomasStorageAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThomasStorageAccounts in the indexer for a given namespace.
func (s thomasStorageAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.ThomasStorageAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ThomasStorageAccount))
	})
	return ret, err
}

// Get retrieves the ThomasStorageAccount from the indexer for a given namespace and name.
func (s thomasStorageAccountNamespaceLister) Get(name string) (*v1alpha2.ThomasStorageAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("thomasstorageaccount"), name)
	}
	return obj.(*v1alpha2.ThomasStorageAccount), nil
}

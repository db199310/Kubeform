/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/modules/v1alpha1"
)

// F4dpAzStgv1Lister helps list F4dpAzStgv1s.
type F4dpAzStgv1Lister interface {
	// List lists all F4dpAzStgv1s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.F4dpAzStgv1, err error)
	// F4dpAzStgv1s returns an object that can list and get F4dpAzStgv1s.
	F4dpAzStgv1s(namespace string) F4dpAzStgv1NamespaceLister
	F4dpAzStgv1ListerExpansion
}

// f4dpAzStgv1Lister implements the F4dpAzStgv1Lister interface.
type f4dpAzStgv1Lister struct {
	indexer cache.Indexer
}

// NewF4dpAzStgv1Lister returns a new F4dpAzStgv1Lister.
func NewF4dpAzStgv1Lister(indexer cache.Indexer) F4dpAzStgv1Lister {
	return &f4dpAzStgv1Lister{indexer: indexer}
}

// List lists all F4dpAzStgv1s in the indexer.
func (s *f4dpAzStgv1Lister) List(selector labels.Selector) (ret []*v1alpha1.F4dpAzStgv1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.F4dpAzStgv1))
	})
	return ret, err
}

// F4dpAzStgv1s returns an object that can list and get F4dpAzStgv1s.
func (s *f4dpAzStgv1Lister) F4dpAzStgv1s(namespace string) F4dpAzStgv1NamespaceLister {
	return f4dpAzStgv1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// F4dpAzStgv1NamespaceLister helps list and get F4dpAzStgv1s.
type F4dpAzStgv1NamespaceLister interface {
	// List lists all F4dpAzStgv1s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.F4dpAzStgv1, err error)
	// Get retrieves the F4dpAzStgv1 from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.F4dpAzStgv1, error)
	F4dpAzStgv1NamespaceListerExpansion
}

// f4dpAzStgv1NamespaceLister implements the F4dpAzStgv1NamespaceLister
// interface.
type f4dpAzStgv1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all F4dpAzStgv1s in the indexer for a given namespace.
func (s f4dpAzStgv1NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.F4dpAzStgv1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.F4dpAzStgv1))
	})
	return ret, err
}

// Get retrieves the F4dpAzStgv1 from the indexer for a given namespace and name.
func (s f4dpAzStgv1NamespaceLister) Get(name string) (*v1alpha1.F4dpAzStgv1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("f4dpazstgv1"), name)
	}
	return obj.(*v1alpha1.F4dpAzStgv1), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/modules/v1alpha1"
)

// F4dpAzFnv1Lister helps list F4dpAzFnv1s.
type F4dpAzFnv1Lister interface {
	// List lists all F4dpAzFnv1s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.F4dpAzFnv1, err error)
	// F4dpAzFnv1s returns an object that can list and get F4dpAzFnv1s.
	F4dpAzFnv1s(namespace string) F4dpAzFnv1NamespaceLister
	F4dpAzFnv1ListerExpansion
}

// f4dpAzFnv1Lister implements the F4dpAzFnv1Lister interface.
type f4dpAzFnv1Lister struct {
	indexer cache.Indexer
}

// NewF4dpAzFnv1Lister returns a new F4dpAzFnv1Lister.
func NewF4dpAzFnv1Lister(indexer cache.Indexer) F4dpAzFnv1Lister {
	return &f4dpAzFnv1Lister{indexer: indexer}
}

// List lists all F4dpAzFnv1s in the indexer.
func (s *f4dpAzFnv1Lister) List(selector labels.Selector) (ret []*v1alpha1.F4dpAzFnv1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.F4dpAzFnv1))
	})
	return ret, err
}

// F4dpAzFnv1s returns an object that can list and get F4dpAzFnv1s.
func (s *f4dpAzFnv1Lister) F4dpAzFnv1s(namespace string) F4dpAzFnv1NamespaceLister {
	return f4dpAzFnv1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// F4dpAzFnv1NamespaceLister helps list and get F4dpAzFnv1s.
type F4dpAzFnv1NamespaceLister interface {
	// List lists all F4dpAzFnv1s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.F4dpAzFnv1, err error)
	// Get retrieves the F4dpAzFnv1 from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.F4dpAzFnv1, error)
	F4dpAzFnv1NamespaceListerExpansion
}

// f4dpAzFnv1NamespaceLister implements the F4dpAzFnv1NamespaceLister
// interface.
type f4dpAzFnv1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all F4dpAzFnv1s in the indexer for a given namespace.
func (s f4dpAzFnv1NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.F4dpAzFnv1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.F4dpAzFnv1))
	})
	return ret, err
}

// Get retrieves the F4dpAzFnv1 from the indexer for a given namespace and name.
func (s f4dpAzFnv1NamespaceLister) Get(name string) (*v1alpha1.F4dpAzFnv1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("f4dpazfnv1"), name)
	}
	return obj.(*v1alpha1.F4dpAzFnv1), nil
}

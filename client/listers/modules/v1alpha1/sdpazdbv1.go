/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/modules/v1alpha1"
)

// SDPAzdbv1Lister helps list SDPAzdbv1s.
type SDPAzdbv1Lister interface {
	// List lists all SDPAzdbv1s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SDPAzdbv1, err error)
	// SDPAzdbv1s returns an object that can list and get SDPAzdbv1s.
	SDPAzdbv1s(namespace string) SDPAzdbv1NamespaceLister
	SDPAzdbv1ListerExpansion
}

// sDPAzdbv1Lister implements the SDPAzdbv1Lister interface.
type sDPAzdbv1Lister struct {
	indexer cache.Indexer
}

// NewSDPAzdbv1Lister returns a new SDPAzdbv1Lister.
func NewSDPAzdbv1Lister(indexer cache.Indexer) SDPAzdbv1Lister {
	return &sDPAzdbv1Lister{indexer: indexer}
}

// List lists all SDPAzdbv1s in the indexer.
func (s *sDPAzdbv1Lister) List(selector labels.Selector) (ret []*v1alpha1.SDPAzdbv1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDPAzdbv1))
	})
	return ret, err
}

// SDPAzdbv1s returns an object that can list and get SDPAzdbv1s.
func (s *sDPAzdbv1Lister) SDPAzdbv1s(namespace string) SDPAzdbv1NamespaceLister {
	return sDPAzdbv1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SDPAzdbv1NamespaceLister helps list and get SDPAzdbv1s.
type SDPAzdbv1NamespaceLister interface {
	// List lists all SDPAzdbv1s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SDPAzdbv1, err error)
	// Get retrieves the SDPAzdbv1 from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SDPAzdbv1, error)
	SDPAzdbv1NamespaceListerExpansion
}

// sDPAzdbv1NamespaceLister implements the SDPAzdbv1NamespaceLister
// interface.
type sDPAzdbv1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SDPAzdbv1s in the indexer for a given namespace.
func (s sDPAzdbv1NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SDPAzdbv1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDPAzdbv1))
	})
	return ret, err
}

// Get retrieves the SDPAzdbv1 from the indexer for a given namespace and name.
func (s sDPAzdbv1NamespaceLister) Get(name string) (*v1alpha1.SDPAzdbv1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sdpazdbv1"), name)
	}
	return obj.(*v1alpha1.SDPAzdbv1), nil
}

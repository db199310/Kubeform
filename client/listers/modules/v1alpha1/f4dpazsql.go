/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/kubeform/apis/modules/v1alpha1"
)

// F4dpAzSqlLister helps list F4dpAzSqls.
type F4dpAzSqlLister interface {
	// List lists all F4dpAzSqls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.F4dpAzSql, err error)
	// F4dpAzSqls returns an object that can list and get F4dpAzSqls.
	F4dpAzSqls(namespace string) F4dpAzSqlNamespaceLister
	F4dpAzSqlListerExpansion
}

// f4dpAzSqlLister implements the F4dpAzSqlLister interface.
type f4dpAzSqlLister struct {
	indexer cache.Indexer
}

// NewF4dpAzSqlLister returns a new F4dpAzSqlLister.
func NewF4dpAzSqlLister(indexer cache.Indexer) F4dpAzSqlLister {
	return &f4dpAzSqlLister{indexer: indexer}
}

// List lists all F4dpAzSqls in the indexer.
func (s *f4dpAzSqlLister) List(selector labels.Selector) (ret []*v1alpha1.F4dpAzSql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.F4dpAzSql))
	})
	return ret, err
}

// F4dpAzSqls returns an object that can list and get F4dpAzSqls.
func (s *f4dpAzSqlLister) F4dpAzSqls(namespace string) F4dpAzSqlNamespaceLister {
	return f4dpAzSqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// F4dpAzSqlNamespaceLister helps list and get F4dpAzSqls.
type F4dpAzSqlNamespaceLister interface {
	// List lists all F4dpAzSqls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.F4dpAzSql, err error)
	// Get retrieves the F4dpAzSql from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.F4dpAzSql, error)
	F4dpAzSqlNamespaceListerExpansion
}

// f4dpAzSqlNamespaceLister implements the F4dpAzSqlNamespaceLister
// interface.
type f4dpAzSqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all F4dpAzSqls in the indexer for a given namespace.
func (s f4dpAzSqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.F4dpAzSql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.F4dpAzSql))
	})
	return ret, err
}

// Get retrieves the F4dpAzSql from the indexer for a given namespace and name.
func (s f4dpAzSqlNamespaceLister) Get(name string) (*v1alpha1.F4dpAzSql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("f4dpazsql"), name)
	}
	return obj.(*v1alpha1.F4dpAzSql), nil
}

/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeform.dev/kubeform/apis/azurerm/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"
)

// PrivateDNSTxtRecordsGetter has a method to return a PrivateDNSTxtRecordInterface.
// A group's client should implement this interface.
type PrivateDNSTxtRecordsGetter interface {
	PrivateDNSTxtRecords(namespace string) PrivateDNSTxtRecordInterface
}

// PrivateDNSTxtRecordInterface has methods to work with PrivateDNSTxtRecord resources.
type PrivateDNSTxtRecordInterface interface {
	Create(*v1alpha1.PrivateDNSTxtRecord) (*v1alpha1.PrivateDNSTxtRecord, error)
	Update(*v1alpha1.PrivateDNSTxtRecord) (*v1alpha1.PrivateDNSTxtRecord, error)
	UpdateStatus(*v1alpha1.PrivateDNSTxtRecord) (*v1alpha1.PrivateDNSTxtRecord, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.PrivateDNSTxtRecord, error)
	List(opts v1.ListOptions) (*v1alpha1.PrivateDNSTxtRecordList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PrivateDNSTxtRecord, err error)
	PrivateDNSTxtRecordExpansion
}

// privateDNSTxtRecords implements PrivateDNSTxtRecordInterface
type privateDNSTxtRecords struct {
	client rest.Interface
	ns     string
}

// newPrivateDNSTxtRecords returns a PrivateDNSTxtRecords
func newPrivateDNSTxtRecords(c *AzurermV1alpha1Client, namespace string) *privateDNSTxtRecords {
	return &privateDNSTxtRecords{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the privateDNSTxtRecord, and returns the corresponding privateDNSTxtRecord object, and an error if there is any.
func (c *privateDNSTxtRecords) Get(name string, options v1.GetOptions) (result *v1alpha1.PrivateDNSTxtRecord, err error) {
	result = &v1alpha1.PrivateDNSTxtRecord{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PrivateDNSTxtRecords that match those selectors.
func (c *privateDNSTxtRecords) List(opts v1.ListOptions) (result *v1alpha1.PrivateDNSTxtRecordList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.PrivateDNSTxtRecordList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested privateDNSTxtRecords.
func (c *privateDNSTxtRecords) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a privateDNSTxtRecord and creates it.  Returns the server's representation of the privateDNSTxtRecord, and an error, if there is any.
func (c *privateDNSTxtRecords) Create(privateDNSTxtRecord *v1alpha1.PrivateDNSTxtRecord) (result *v1alpha1.PrivateDNSTxtRecord, err error) {
	result = &v1alpha1.PrivateDNSTxtRecord{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		Body(privateDNSTxtRecord).
		Do().
		Into(result)
	return
}

// Update takes the representation of a privateDNSTxtRecord and updates it. Returns the server's representation of the privateDNSTxtRecord, and an error, if there is any.
func (c *privateDNSTxtRecords) Update(privateDNSTxtRecord *v1alpha1.PrivateDNSTxtRecord) (result *v1alpha1.PrivateDNSTxtRecord, err error) {
	result = &v1alpha1.PrivateDNSTxtRecord{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		Name(privateDNSTxtRecord.Name).
		Body(privateDNSTxtRecord).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *privateDNSTxtRecords) UpdateStatus(privateDNSTxtRecord *v1alpha1.PrivateDNSTxtRecord) (result *v1alpha1.PrivateDNSTxtRecord, err error) {
	result = &v1alpha1.PrivateDNSTxtRecord{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		Name(privateDNSTxtRecord.Name).
		SubResource("status").
		Body(privateDNSTxtRecord).
		Do().
		Into(result)
	return
}

// Delete takes name of the privateDNSTxtRecord and deletes it. Returns an error if one occurs.
func (c *privateDNSTxtRecords) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *privateDNSTxtRecords) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched privateDNSTxtRecord.
func (c *privateDNSTxtRecords) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PrivateDNSTxtRecord, err error) {
	result = &v1alpha1.PrivateDNSTxtRecord{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("privatednstxtrecords").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
